import { Agent, AgentConfig } from './Agent';
import { Goal, Action, Experience, ReasoningResult, LearningResult, ReasoningSession, AdaptationResult, ActionResult, SelfImprovementResult } from '@/types';
import { AgentPerformance } from './Agent';
import { ReasoningEngine } from '@/core/ReasoningEngine';
export interface ReasoningAgentConfig extends AgentConfig {
    reasoningEngine: ReasoningEngine;
    reasoningCapabilities: string[];
    problemSolvingStrategies: string[];
    logicalFrameworks: string[];
}
export declare class ReasoningAgent extends Agent {
    private reasoningEngine;
    private reasoningSessions;
    private reasoningCapabilities;
    private problemSolvingStrategies;
    private logicalFrameworks;
    private reasoningHistory;
    private performanceMetrics;
    constructor(config: ReasoningAgentConfig);
    private initializeCapabilities;
    private initializeStrategies;
    private initializeFrameworks;
    process(input: any, context?: Record<string, any>): Promise<{
        output: any;
        reasoning: ReasoningResult;
        learning: LearningResult;
        actions: Action[];
    }>;
    reason(input: any, context?: Record<string, any>): Promise<ReasoningResult>;
    learnFromExperience(experience: Experience): Promise<LearningResult>;
    adaptToNewContext(context: Record<string, any>): Promise<AdaptationResult>;
    executeAction(action: Action, context?: Record<string, any>): Promise<ActionResult>;
    selfImprove(): Promise<SelfImprovementResult>;
    private createReasoningTask;
    private startReasoningSession;
    private completeReasoningSession;
    private determineReasoningApproach;
    private determineTaskType;
    private calculateTaskComplexity;
    private calculateTaskPriority;
    private extractConstraints;
    private generateExpectedOutput;
    private analyzeTextComplexity;
    private analyzeArrayComplexity;
    private analyzeObjectComplexity;
    private calculateArrayDepth;
    private createExperience;
    private extractGoalsFromReasoning;
    private updateReasoningPerformance;
    private extractAndStorePatterns;
    private extractReasoningPatterns;
    private calculateCapabilityImprovements;
    private updateReasoningCapabilities;
    private updateProblemSolvingStrategies;
    private analyzeContextRequirements;
    private getCurrentCapabilities;
    private createAdaptationPlan;
    private calculateContextComplexity;
    private calculateAdaptationConfidence;
    private analyzeGoalRequirements;
    private generateActionPlan;
    private prioritizeActions;
    private canExecuteAction;
    private executeReasoningAction;
    private generateActionFeedback;
    private updateActionPerformance;
    private calculateTotalCost;
    private analyzePerformance;
    private identifyImprovements;
    private adaptReasoningStrategies;
    private updateCapabilities;
    private adjustParameters;
    private calculateGoalComplexity;
    private estimateGoalResources;
    getRequiredCapabilitiesForGoal(goal: Goal): string[];
    private getEnvironmentContext;
    private getMemoryContext;
    private getCurrentGoals;
    private getCurrentConstraints;
    private getCurrentState;
    private getPerformanceMetrics;
    private getNewlyAcquiredCapabilities;
    private calculatePerformanceGains;
    private calculateImprovementConfidence;
    private calculateOverallImprovementConfidence;
    private gatherLearningEvidence;
    private calculateLearningConfidence;
    get id(): string;
    getReasoningCapabilities(): Map<string, number>;
    getProblemSolvingStrategies(): Set<string>;
    getLogicalFrameworks(): Set<string>;
    getReasoningHistory(): ReasoningResult[];
    getActiveSessions(): Map<string, ReasoningSession>;
    addProblemSolvingStrategy(strategy: string): void;
    addLogicalFramework(framework: string): void;
    getCapabilityLevel(capability: string): number;
    updateSkill(capability: string, level: number): void;
    getParameter(param: string): number | undefined;
    setParameter(param: string, value: number): void;
    getEfficiency(): number;
    updatePerformance(metrics: Partial<Record<string, number>>): void;
    isCapableOf(actionType: string): boolean;
    private performReasoning;
    private analyzeInput;
    private recognizePatterns;
    private applyLogicalProcessing;
    private generateConclusions;
    private validateReasoning;
    private extractBasicPatterns;
    private selectProcessingMethod;
    private simulateProcessing;
    private checkStepConsistency;
    learn(experiences: Experience[], context?: Record<string, any>): Promise<LearningResult>;
    plan(goals: Goal[], context?: Record<string, any>): Promise<Action[]>;
    execute(action: Action, context?: Record<string, any>): Promise<ActionResult>;
    adapt(performance: AgentPerformance, context?: Record<string, any>): Promise<void>;
}
//# sourceMappingURL=ReasoningAgent.d.ts.map