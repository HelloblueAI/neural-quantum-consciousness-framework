import { Agent, AgentConfig } from './Agent';
import { Goal, Action, Experience, LearningResult, LearningSession, AdaptationResult, ActionResult, SelfImprovementResult } from '@/types';
import { AgentPerformance } from './Agent';
import { LearningEngine } from '@/core/LearningEngine';
import { MetaLearningEngine } from '@/types';
import { KnowledgeBase } from '@/core/KnowledgeBase';
export interface LearningAgentConfig extends AgentConfig {
    learningEngine: LearningEngine;
    metaLearningEngine: MetaLearningEngine;
    knowledgeBase: KnowledgeBase;
    learningCapabilities: string[];
    learningStrategies: string[];
    learningFrameworks: string[];
}
export declare class LearningAgent extends Agent {
    private learningEngine;
    private learningSessions;
    private learningCapabilities;
    private learningStrategies;
    private learningFrameworks;
    private learningHistory;
    private performanceMetrics;
    private metaLearningEngine;
    private knowledgeBase;
    constructor(config: LearningAgentConfig);
    private initializeCapabilities;
    private initializeStrategies;
    private initializeFrameworks;
    process(_input: any, context?: Record<string, any>): Promise<{
        output: any;
        reasoning: any;
        learning: LearningResult;
        actions: Action[];
    }>;
    reason(_input: any, _context?: Record<string, any>): Promise<any>;
    learn(input: any, context?: Record<string, any>): Promise<LearningResult>;
    learnFromExperience(experience: Experience): Promise<LearningResult>;
    adaptToNewDomain(domain: string, context?: Record<string, any>): Promise<AdaptationResult>;
    executeAction(action: Action, context?: Record<string, any>): Promise<ActionResult>;
    selfImprove(): Promise<SelfImprovementResult>;
    private createLearningTask;
    private startLearningSession;
    private completeLearningSession;
    private determineLearningType;
    private calculateLearningComplexity;
    private calculateLearningPriority;
    private extractLearningConstraints;
    private generateExpectedLearningOutput;
    private analyzeLearningTextComplexity;
    private analyzeLearningArrayComplexity;
    private analyzeLearningObjectComplexity;
    private calculateArrayDepth;
    private extractLearningPatterns;
    private extractInsights;
    private calculateCapabilityImprovements;
    private updateLearningStrategies;
    private storeExperience;
    private analyzeDomainRequirements;
    private calculateDomainComplexity;
    private extractDomainRequirements;
    private identifyDomainPrerequisites;
    private generateDomainLearningPath;
    private getCurrentCapabilities;
    private createDomainAdaptationPlan;
    private calculateAdaptationConfidence;
    private analyzeGoalRequirements;
    private generateLearningActionPlan;
    private prioritizeLearningActions;
    private canExecuteAction;
    private executeLearningAction;
    private generateActionFeedback;
    private updateActionPerformance;
    private calculateTotalCost;
    private analyzeLearningPerformance;
    private identifyLearningImprovements;
    private adaptLearningStrategies;
    private updateLearningCapabilities;
    private adjustLearningParameters;
    private calculateGoalComplexity;
    private estimateGoalResources;
    private getRequiredLearningCapabilitiesForGoal;
    private triggerMetaLearning;
    private extractAndStoreKnowledge;
    private updateLearningPerformance;
    private calculateLearningConfidence;
    private getNewlyAcquiredCapabilities;
    private calculateLearningPerformanceGains;
    private calculateImprovementConfidence;
    private calculateOverallImprovementConfidence;
    private performLearning;
    private analyzeLearningInput;
    private recognizeLearningPatterns;
    private extractKnowledge;
    private integrateLearning;
    private validateLearning;
    private extractBasicLearningPatterns;
    get id(): string;
    getLearningCapabilities(): Map<string, number>;
    getLearningStrategies(): Set<string>;
    getLearningFrameworks(): Set<string>;
    getLearningHistory(): LearningResult[];
    getActiveLearningSessions(): Map<string, LearningSession>;
    addLearningStrategy(strategy: string): void;
    addLearningFramework(framework: string): void;
    getCapabilityLevel(capability: string): number;
    updateSkill(capability: string, level: number): void;
    getParameter(param: string): number | undefined;
    setParameter(param: string, value: number): void;
    getEfficiency(): number;
    updatePerformance(metrics: Partial<Record<string, number>>): void;
    isCapableOf(actionType: string): boolean;
    plan(goals: Goal[], context?: Record<string, any>): Promise<Action[]>;
    execute(action: Action, context?: Record<string, any>): Promise<ActionResult>;
    adapt(performance: AgentPerformance, context?: Record<string, any>): Promise<void>;
}
//# sourceMappingURL=LearningAgent.d.ts.map