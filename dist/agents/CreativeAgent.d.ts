import { Agent, AgentConfig } from './Agent';
import { Action, CreativeResult, CreativeTask, CreativeSession, ActionResult, SelfImprovementResult } from '@/types';
import { AgentPerformance } from './Agent';
import { CreativeEngine } from '@/types';
export interface CreativeAgentConfig extends AgentConfig {
    creativeEngine: CreativeEngine;
    creativeCapabilities: string[];
    artisticDomains: string[];
    innovationStrategies: string[];
}
export declare class CreativeAgent extends Agent {
    private creativeEngine;
    private creativeSessions;
    private creativeCapabilities;
    private creativeStrategies;
    private creativeFrameworks;
    private creativeHistory;
    private performanceMetrics;
    private inspirationSources;
    private creativeConstraints;
    constructor(config: CreativeAgentConfig);
    private initializeCapabilities;
    private initializeStrategies;
    private initializeFrameworks;
    private initializeInspirationSources;
    create(input: any, context?: Record<string, any>): Promise<CreativeResult>;
    reason(input: any, context?: Record<string, any>): Promise<CreativeResult>;
    learn(input: any, context?: Record<string, any>): Promise<CreativeResult>;
    plan(input: any, context?: Record<string, any>): Promise<CreativeResult>;
    executeAction(action: Action, context?: Record<string, any>): Promise<ActionResult>;
    adapt(performance: AgentPerformance, context?: Record<string, any>): Promise<void>;
    selfImprove(): Promise<SelfImprovementResult>;
    process(input: any, context?: Record<string, any>): Promise<{
        output: any;
        reasoning: any;
        learning: any;
        actions: Action[];
    }>;
    execute(action: Action, context?: Record<string, any>): Promise<{
        success: boolean;
        result: any;
        feedback: any;
    }>;
    private createCreativeTask;
    private startCreativeSession;
    private completeCreativeSession;
    private determineCreativeType;
    private calculateCreativeComplexity;
    private calculateCreativePriority;
    private extractCreativeConstraints;
    private generateExpectedCreativeOutput;
    private analyzeCreativeTextComplexity;
    private analyzeCreativeArrayComplexity;
    private analyzeCreativeObjectComplexity;
    private calculateArrayDepth;
    private performCreativeProcess;
    private gatherInspiration;
    private performDivergentThinking;
    private generateCreativeIdeas;
    private synthesizeCreativeSolution;
    private evaluateCreativeSolution;
    private performCreativeReasoning;
    private performCreativeLearning;
    private performCreativePlanning;
    private analyzeCreativeGoalRequirements;
    private generateCreativeActionPlan;
    private prioritizeCreativeActions;
    private canExecuteAction;
    private executeCreativeAction;
    private generateCreativeActionFeedback;
    private updateActionPerformance;
    private calculateTotalCost;
    private analyzeCreativePerformance;
    private identifyCreativeImprovements;
    private adaptCreativeStrategies;
    private updateCreativeCapabilities;
    private adjustCreativeParameters;
    private calculateGoalComplexity;
    private estimateGoalResources;
    private getRequiredCreativeCapabilitiesForGoal;
    private extractAndStoreCreativeInsights;
    private updateCreativePerformance;
    private getNewlyAcquiredCapabilities;
    private calculateCreativePerformanceGains;
    private calculateImprovementConfidence;
    private calculateOverallImprovementConfidence;
    get id(): string;
    getCreativeCapabilities(): Map<string, number>;
    getCreativeStrategies(): Set<string>;
    getCreativeFrameworks(): Set<string>;
    getCreativeHistory(): CreativeResult[];
    getActiveCreativeSessions(): Map<string, CreativeSession>;
    getInspirationSources(): Set<string>;
    addCreativeStrategy(strategy: string): void;
    addCreativeFramework(framework: string): void;
    addInspirationSource(source: string): void;
    getCapabilityLevel(capability: string): number;
    updateSkill(capability: string, level: number): void;
    getParameter(param: string): number | undefined;
    setParameter(param: string, value: number): void;
    getEfficiency(): number;
    updatePerformance(metrics: Partial<Record<string, number>>): void;
    isCapableOf(actionType: string): boolean;
    getCreativeAlgorithms(): string[];
    getCreativeDomains(): string[];
    getActiveTasks(): CreativeTask[];
    getCreativeSessions(): CreativeSession[];
    addCreativeAlgorithm(algorithm: string): void;
    addCreativeDomain(domain: string): void;
}
//# sourceMappingURL=CreativeAgent.d.ts.map