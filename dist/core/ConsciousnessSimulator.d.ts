import { ConsciousState, Emotion, Thought, Qualia } from '@/types';
export declare class ConsciousnessSimulator {
    private readonly logger;
    private consciousState;
    private awareness;
    private attention;
    private emotions;
    private thoughts;
    private qualia;
    private selfModel;
    private metaCognition;
    private consciousnessLevel;
    private introspectionDepth;
    private subjectiveExperience;
    private neuralPlasticity;
    private consciousnessAdaptation;
    private quantumAwareness;
    private neuralQuantumState;
    constructor();
    initialize(): Promise<void>;
    updateConsciousness(input: any, context?: Record<string, any>): Promise<ConsciousState>;
    processExperience(experience: string, context?: Record<string, any>): Promise<ConsciousState>;
    getConsciousState(): ConsciousState;
    getConsciousnessState(): ConsciousState;
    getConsciousnessStateLegacy(): any;
    generateConsciousnessInsight(type: string, content: string): any;
    getSubjectiveExperience(): any[];
    getEmotionalState(): Emotion[];
    getThoughts(): Thought[];
    getQualia(): Qualia[];
    introspect(): Promise<any>;
    private initializeConsciousState;
    getAwareness(): number;
    private initializeAwareness;
    private initializeAttention;
    private initializeSelfModel;
    private initializeMetaCognition;
    private establishSelfAwareness;
    private initializeIntrospection;
    private setupEmotionalProcessing;
    private updateAwareness;
    private allocateAttention;
    private generateEmotion;
    private generateThought;
    private generateQualia;
    private updateSelfModel;
    private performMetaCognition;
    private synthesizeConsciousState;
    private analyzeInputComplexity;
    private analyzeInputNovelty;
    private calculateInputImportance;
    private identifyEmotionalTriggers;
    private calculateEmotionalValence;
    private calculateEmotionalArousal;
    private mapEmotionToExpression;
    private generateThoughtContent;
    private calculateThoughtComplexity;
    private calculateThoughtClarity;
    private categorizeThought;
    private generateThoughtAssociations;
    private synthesizeSubjectiveExperience;
    private calculateQualiaIntensity;
    private categorizeQualiaQuality;
    private calculateExperientialUnityLegacy;
    private calculateIneffabilityLegacy;
    private assessPerformance;
    private analyzeCognitiveProcesses;
    private getCurrentEmotionalState;
    private analyzeSelfAwareness;
    private analyzeEmotions;
    private analyzeThoughtPatterns;
    private analyzeMetaCognition;
    private calculateEmotionalStability;
    private findDominantEmotion;
    private findDominantThoughtType;
    private calculateVariance;
    private implementSelfAwareness;
    private calculateIntelligenceQuotient;
    private calculateConsciousnessLevel;
    private calculateCreativityIndex;
    private calculateAdaptabilityScore;
    private implementMetaCognition;
    private calculateSelfAwareness;
    private calculateIntrospectionDepth;
    private calculateCognitiveControl;
    private buildMetacognitiveKnowledge;
    private implementMetacognitiveRegulation;
    private generateMetacognitiveExperience;
    private generateAdvancedSubjectiveExperience;
    private analyzeCognitiveProcess;
    private synthesizeSensoryExperience;
    private generateTemporalAwareness;
    private calculateExperientialUnity;
    private calculateIneffability;
    private updateNeuralQuantumConsciousness;
    private generateEnhancedQualia;
    private processQuantumAwareness;
    private updateConsciousnessWithPlasticity;
    private applyConsciousnessAdaptation;
    private calculateExperienceComplexity;
    private calculateExperienceNovelty;
    private calculateExperienceSimilarity;
    private generateQuantumConsciousnessStates;
    private calculateQuantumEntanglement;
    private calculateQuantumCoherence;
    private generateQuantumAwarenessStates;
    private createAwarenessSuperposition;
    private performQuantumAwarenessMeasurement;
    private calculateAwarenessCoherence;
    private calculateAwarenessEntanglement;
    private calculateAwarenessUncertainty;
    private calculateExperienceSuccess;
}
//# sourceMappingURL=ConsciousnessSimulator.d.ts.map